{"ast":null,"code":"var _jsxFileName = \"/home/dima/Documents/Thinkful/Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ActiveTimer.js\";\nimport React, { useState } from \"react\";\nimport { minuteToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction activeTimer({\n  session,\n  curFocus,\n  curBreak\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 13\n    }\n  },\n  /* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\n  session ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, session.label, \" for \", session.label !== \"On Break\" ? minutesToDuration(curFocus) : minutesToDuration(curBreak), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, secondsToDuration(session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\" //Seperate Component\n    ,\n    \"aria-valuenow\": session.label == \"Focusing\" ? Math.floor(100 * ((curFocus * 60 - session.timeRemaining) / (curFocus * 60))) : Math.floor(100 * ((curBreak * 60 - session.timeRemaining) / (curBreak * 60))),\n    style: {\n      width: Math.floor(100 * ((curFocus * 60 - session.timeRemaining) / (curFocus * 60)))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }\n  }))))) : null);\n}","map":{"version":3,"sources":["/home/dima/Documents/Thinkful/Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ActiveTimer.js"],"names":["React","useState","minuteToDuration","secondsToDuration","activeTimer","session","curFocus","curBreak","label","minutesToDuration","timeRemaining","height","Math","floor","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,gBAAR,EAA0BC,iBAA1B,QAAmD,mBAAnD;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA;AAArB,CAArB,EAAsD;AAClD,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACCF,EAAAA,OAAO,gBAAK,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACd;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACG,KADX,WACuBH,OAAO,CAACG,KAAR,KAAkB,UAAlB,GAA+BC,iBAAiB,CAACH,QAAD,CAAhD,GAA6DG,iBAAiB,CAACF,QAAD,CADrG,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,iBAAiB,CAACE,OAAO,CAACK,aAAT,CADpB,eANF,CADF,CADc,eAad;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB,CAKE;AALF;AAMI,qBACVN,OAAO,CAACG,KAAR,IAAiB,UAAjB,GACHI,IAAI,CAACC,KAAL,CAAW,OAAO,CAACP,QAAQ,GAAG,EAAX,GAAgBD,OAAO,CAACK,aAAzB,KAA2CJ,QAAQ,GAAG,EAAtD,CAAP,CAAX,CADG,GAEDM,IAAI,CAACC,KAAL,CAAW,OAAO,CAACN,QAAQ,GAAG,EAAX,GAAgBF,OAAO,CAACK,aAAzB,KAA2CH,QAAQ,GAAG,EAAtD,CAAP,CAAX,CATO;AAWE,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAEF,IAAI,CAACC,KAAL,CAAW,OAAO,CAACP,QAAQ,GAAG,EAAX,GAAgBD,OAAO,CAACK,aAAzB,KAA2CJ,QAAQ,GAAG,EAAtD,CAAP,CAAX;AAAT,KAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAbc,CAAL,GAgCkB,IAlCvB,CAAR;AAsCH","sourcesContent":["import React, { useState } from \"react\";\nimport {minuteToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction activeTimer({ session, curFocus, curBreak }) {\n    return (<div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\n          session ? ( <React.Fragment>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.label} for {session.label !== \"On Break\" ? minutesToDuration(curFocus) : minutesToDuration(curBreak)} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                //Seperate Component\n                  aria-valuenow={\n\t\t      session.label == \"Focusing\" ? (\n\t\t\t  Math.floor(100 * ((curFocus * 60 - session.timeRemaining) / (curFocus * 60))))\n\t\t\t  : Math.floor(100 * ((curBreak * 60 - session.timeRemaining) / (curBreak * 60)))\n\t\t  }\n                style={{ width: Math.floor(100 * ((curFocus * 60 - session.timeRemaining) / (curFocus * 60)))}}\n              />\n            </div>\n          </div>\n              </div>\n              </React.Fragment>) : null\n          }\n            </div>\n\t   )\n}\n"]},"metadata":{},"sourceType":"module"}